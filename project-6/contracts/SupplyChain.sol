// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.21;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

// Define a contract 'SupplyChain'
contract SupplyChain is Ownable, AccessControl {
  // Define actor roles
  bytes32 public constant FARMER_ROLE = keccak256("FARMER_ROLE");
  bytes32 public constant DISTRIBUTOR_ROLE = keccak256("DISTRIBUTOR_ROLE");
  bytes32 public constant RETAILER_ROLE = keccak256("RETAILER_ROLE");
  bytes32 public constant CONSUMER_ROLE = keccak256("CONSUMER_ROLE");

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint public upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint public sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping(uint => Item) public items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping(uint => string[]) public itemsHistory;

  // Define enum 'Status' with the following values:
  enum Status {
    Harvested, // 0
    Processed, // 1
    Packed, // 2
    ForSale, // 3
    Sold, // 4
    Shipped, // 5
    Received, // 6
    Purchased // 7
  }

  Status public constant defaultStatus = Status.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint sku; // Stock Keeping Unit (SKU)
    uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address payable originFarmerID; // Metamask-Ethereum address of the Farmer
    string originFarmName; // Farmer Name
    string originFarmInformation; // Farmer Information
    string originFarmLatitude; // Farm Latitude
    string originFarmLongitude; // Farm Longitude
    uint productID; // Product ID potentially a combination of upc + sku
    string productNotes; // Product Notes
    uint productPrice; // Product Price
    Status itemStatus; // Product Status as represented in the enum above
    address payable distributorID; // Metamask-Ethereum address of the Distributor
    address payable retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifier that verifies the Caller
  modifier verifyCaller(address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier maybeRefundDifference(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  modifier onlyStatus(uint _upc, Status _status) {
    require(items[_upc].itemStatus == _status);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  constructor() {
    sku = 1;
    upc = 1;

    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(
    uint _upc,
    address _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory _originFarmLongitude,
    string memory _productNotes
  ) public onlyRole(FARMER_ROLE) {
    // Add the new item as part of Harvest
    items[_upc] = Item({
      sku: sku,
      upc: _upc,
      ownerID: _originFarmerID,
      originFarmerID: payable(_originFarmerID),
      originFarmName: _originFarmName,
      originFarmInformation: _originFarmInformation,
      originFarmLatitude: _originFarmLatitude,
      originFarmLongitude: _originFarmLongitude,
      productID: _upc + sku,
      productNotes: _productNotes,
      productPrice: 0,
      itemStatus: defaultStatus,
      distributorID: payable(address(0)),
      retailerID: payable(address(0)),
      consumerID: payable(address(0))
    });

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'processItem' that allows a farmer to mark an item 'Processed'
  function processItem(
    uint _upc
  ) public onlyStatus(_upc, Status.Harvested) onlyRole(FARMER_ROLE) {
    // Update the appropriate fields
    items[_upc].itemStatus = Status.Processed;

    emit Processed(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(
    uint _upc
  ) public onlyStatus(_upc, Status.Processed) onlyRole(FARMER_ROLE) {
    // Update the appropriate fields
    items[_upc].itemStatus = Status.Packed;

    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(
    uint _upc,
    uint _price
  ) public onlyStatus(_upc, Status.Packed) onlyRole(FARMER_ROLE) {
    // Update the appropriate fields
    items[_upc].itemStatus = Status.ForSale;
    items[_upc].productPrice = _price;

    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the distributor to mark an item 'Sold'
  function buyItem(
    uint _upc
  )
    public
    payable
    onlyStatus(_upc, Status.ForSale)
    onlyRole(DISTRIBUTOR_ROLE)
    paidEnough(items[_upc].productPrice)
    maybeRefundDifference(_upc)
  {
    // Update the appropriate fields - ownerID, distributorID, itemStatus
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = payable(msg.sender);
    items[_upc].itemStatus = Status.Sold;

    // Transfer money to farmer
    items[_upc].originFarmerID.transfer(items[_upc].productPrice);

    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  function shipItem(
    uint _upc
  ) public onlyStatus(_upc, Status.Sold) onlyRole(DISTRIBUTOR_ROLE) {
    // Update the appropriate fields
    items[_upc].itemStatus = Status.Shipped;

    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  function receiveItem(
    uint _upc
  )
    public
    onlyStatus(_upc, Status.Shipped)
    onlyRole(RETAILER_ROLE)
  // Access Control List enforced by calling Smart Contract / DApp
  {
    // Update the appropriate fields - ownerID, retailerID, itemStatus
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = payable(msg.sender);
    items[_upc].itemStatus = Status.Received;

    emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  function purchaseItem(
    uint _upc
  )
    public
    payable
    onlyStatus(_upc, Status.Received)
    onlyRole(CONSUMER_ROLE)
    paidEnough(items[_upc].productPrice)
    maybeRefundDifference(_upc)
  // Access Control List enforced by calling Smart Contract / DApp
  {
    // Update the appropriate fields - ownerID, consumerID, itemStatus
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = payable(msg.sender);
    items[_upc].itemStatus = Status.Purchased;

    items[_upc].distributorID.transfer(items[_upc].productPrice);

    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(
    uint _upc
  )
    public
    view
    returns (
      uint itemSKU,
      uint itemUPC,
      address ownerID,
      address originFarmerID,
      string memory originFarmName,
      string memory originFarmInformation,
      string memory originFarmLatitude,
      string memory originFarmLongitude
    )
  {
    // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;

    return (
      itemSKU,
      itemUPC,
      ownerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(
    uint _upc
  )
    public
    view
    returns (
      uint itemSKU,
      uint itemUPC,
      uint productID,
      string memory productNotes,
      uint productPrice,
      uint itemStatus,
      address distributorID,
      address retailerID,
      address consumerID
    )
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemStatus = uint(items[_upc].itemStatus);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;

    return (
      itemSKU,
      itemUPC,
      productID,
      productNotes,
      productPrice,
      itemStatus,
      distributorID,
      retailerID,
      consumerID
    );
  }
}
